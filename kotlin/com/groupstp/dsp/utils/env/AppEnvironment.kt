package com.groupstp.dsp.config.env

/**
 * Расширение стандартного Environment возможностью динамически изменять настройки приложения в рантайме.
 *
 * Интерфейс не является родственником стандартного Environment, т.к. в противном случае возникают конфликты на этапе
 * связывания (autowire) по типу.
 */

interface AppEnvironment {

    /* Интерфейс стандартного Environment (частичный, заимствовано не все) */

    fun containsProperty(key: String): Boolean

    fun getProperty(key: String): String?

    fun getProperty(key: String, defaultValue: String): String

    fun <T> getProperty(key: String, targetType: Class<T>): T?

    fun <T> getProperty(key: String, targetType: Class<T>, defaultValue: T): T

    /* Расширение стандартного Environment: Кастомное приведение типа настройки */

    fun <T> getProperty(key: String, cast: (String) -> T): T?

    /* Расширение стандартного Environment: Динамические настройки */

    /**
     * Задать значение настройки.
     *
     * После вызова данного метода настройка приобретает динамически заданное значение.
     * Такие значения являются более приоритетными по отношению к прочим значениям (заданным через конфиг-файлы и пр.)
     */
    fun setProperty(key: String, value: Any?)

    /**
     * Удалить динамически заданное значение настройки.
     *
     * После удаления значение может перестать перекрывать прочие значения (заданные через конфиг-файлы и пр.)
     * Поэтому в ряде случаев эффект от удаления может быть неожиданным - он вызовет возврат к прежнему значению,
     * взятому из "обычной" конфигурации, вместо того чтобы полностью удалить настройку.
     */
    fun removeDynamicProperty(key: String)

    /**
     * Выяснить, существует ли динамически заданное значение для указанной настройки.
     *
     * Другими словами, является ли значение для указанной настройки динамическим или нет (с учетом того, что
     * динамически заданные значения имеют наивысший приоритет перед значениями, заданными прочими способами)
     */
    fun containsDynamicProperty(key: String): Boolean

    /**
     * Получить список динамически заданных настроек.
     */
    fun getDynamicPropertyKeys(): List<String>
}
